#include<iostream>
#include<queue>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;

    }
};
node* buildTree(node* root){
     int data;
     cout<<"Enter the data ";
    cin>>data;
    root = new node(data);
    
   
    
    if(data == -1){
        return NULL;
    }
    cout<<"Enter the data in left "<<endl;
    root->left = buildTree(root->left);
    cout<<"Enter the data in right "<<endl;
    root->right = buildTree(root->right);
    return root;
}
void levelOrderTravelsal(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
       node* temp = q.front();
       q.pop();
       if(temp==NULL){
        cout<<endl;
      if(!q.empty()){
        q.push(NULL);
      }
       } else{
        cout<<temp->data<<" ";
        if(temp->left)
        q.push(temp->left);
        if(temp->right)
        q.push(temp->right);
       }
    }
}
void inorder(node* root){
    if(root == NULL)
    return;
    
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(node* root){
     if(root == NULL)
    return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(node* root){
      if(root == NULL)
    return;
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

void buildFromLevelOrder(node* &root){
    queue<node*> q;
    cout<<"Enter data for root"<<endl;
    int data;
    cin>>data;
    root = new node(data);
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        cout<<"Enter data for left node "<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        if(leftdata !=-1){
            temp->left = new node(leftdata);
            q.push(temp->left);
        }
         cout<<"Enter data for right node "<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        if(rightdata !=-1){
            temp->right = new node(rightdata);
            q.push(temp->right);
        }

    }
}

int height(node* node){
    if(node == NULL)
     return 0;
    int left = height(node->left);
    int right = height(node->right);
    int ans = max(left,right)+1;
    return ans;
}
  pair<int,int> diameterfast(node* root){
     if(root == NULL) {
        pair<int,int>  p = make_pair(0,0);
         return p;
     }
   
    pair<int,int> left = diameterfast(root->left);
    pair<int,int> right = diameterfast(root->right);
    int op1 = left.first;
    int op2 = right.first;
    int op3 = left.second + right.second + 1;
    pair<int,int> ans;
    ans.first = max(op1, max(op2, op3));
    ans.second = max(left.second, right.second)+1;
    return ans;

  }
  pair<bool,int> isBalancedFast(node* root){
if(root==NULL){
    pair<bool,int> p = make_pair(true,0);
    return p;
}
pair<int,int> left = isBalancedFast(root->left);
pair<int,int> right = isBalancedFast(root->right);
bool leftAns = left.first;
bool rightAns = right.first;

bool diff = abs(left.second - right.second)<=1;
pair<bool,int> ans;
ans.second = max(left.second,right.second)+1;
if(leftAns && rightAns && diff){
    ans.first = true;
} else{
    ans.first = false;
}
return ans;
  }
 bool isBalanced(node* root){
    return isBalancedFast(root).first;
 }


int diameter(node* root){
    
     return diameterfast(root).first;
    //  int op1 = diameter(root->left);
    //  int op2 = diameter(root->right);
    //  int op3 = height(root->left) +height(root->right) + 1;
    //  int ans = max(op1, max(op2,op3));
    //  return ans;

}
pair<bool,int> isSumTreeFast(node* root){
    if(root==NULL){
        pair<bool,int> p = make_pair(true,0);
        return p;
    }
    if(root->left == NULL && root->right==NULL){
        pair<bool,int> p = make_pair(true,0);
        return p;
    }
    pair<bool,int> leftAns = isSumTreeFast(root->left);
    pair<bool,int> rightAns = isSumTreeFast(root->right);
    bool left = leftAns.first;
    bool right = rightAns.first;
    bool condn = root->data == leftAns.second + rightAns.second;
    pair<bool,int> ans;
    if(left && right && condn){
        ans.first =true;
        ans.second = 2*root->data;
    } else{
        ans.first = false;
    }
    return ans;
}

int main(){
    node* root = NULL;

   // buildFromLevelOrder(root);
    root = buildTree(root);
    // levelOrderTravelsal(root);
    // cout<<"Inorder travesal--------------"<<endl;
    // inorder(root);
    // cout<<endl;
    // cout<<"PreOrder travesal---------"<<endl;
    // preorder(root);
    //  cout<<endl;
    // cout<<"PostOrder travesal---------"<<endl;
    //postorder(root);
   // cout<<isBalanced(root);
     int d = diameter(root);
    cout<<d;
    // cout<<endl;
//    int a = height(root);
//    cout<<"height is "<<a;
    return 0;
}
